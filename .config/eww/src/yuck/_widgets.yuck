(defwidget outer-window [] 
    (box))
(defwidget line [] 
    (box))
(defwidget profile [] 
    (box :orientation "v"
         :space-evenly "true"

        (box :class "pfp")
        (box :class "text" 
            :space-evenly "true"

           (label :class "username" :text "@${username}")
        )
    )
)
(defwidget system-manager [] 
    (box :orientation "h" 
         :space-evenly "false" 

        (box :class "ram-bar"
            (scale :min 0 :max 101 :active "false" :value used_ram :orientation "v" :flipped "true"
        ))
        (box :class "disk-bar"
            (scale :min 0 :max 101 :active "false" :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)} :orientation "v" :flipped "true"
        ))
        (box :class "vol-bar"
            (scale :min 0 :max 101 :value volume :orientation "v" :flipped "true" :onchange "amixer -q set Master {}%"
        ))
        (box :class "bri-bar"
            (scale :min 0 :max 101 :value brightness :orientation "v" :flipped "true" :onchange "brightnessctl set {}%"
        ))
    )
)
(defwidget layout-manager [] 
    (box :class "layouts" 
         :orientation "v"
        (box :class "layout-btn"
             :orientation "h"
             :space-evenly "true"
            (button :onclick "bsp-layout once grid" "")
            (button :onclick "bsp-layout once even" "")
            (button :onclick "bsp-layout once tall" "")
        )
    )
)
(defwidget music-player [] 
    (box :class "music-player"
         :orientation "h"
        (box :class "song-art" :style "background-image: url('${art}')":tooltip "${song_artist} - ${song_title_full}" song_art)
        (box :class "song-info" :orientation "v"
            (box :class "song-controls" :orientation "v"
                (button :onclick "playerctl previous" "")
                (button :class "play-pause" :onclick "playerctl play-pause" player_status)
                (button :onclick "playerctl next" "")
            )
        )
    )
)
(defwidget music-info []
    (box :class "music-info" :orientation "v"
        (box :class "b" :orientation "h" :space-evenly "false"
            (label :class "song-title" :text song_title)
        )
        (box :class "c" :orientation "h" :space-evenly "false"
            (label :class "song-artist" :text "by ${song_artist}")
        )
    )
)
(defwidget lock-screen [] 
    (box :orientation "v" :space-evenly "true"
        (box :class "lock-screen"
             :orientation "h"

            (box :class "lock-pfp")
            (box :class "lock-text" :orientation "v"
                (box :class "lock-username" username)
                (box :class "lock-hostname" "@${hostname}")
            )
        )
    )
)
(defwidget powermenu []
    (box :class "powermenu" :orientation "v"
        (button :onclick "systemctl poweroff" "")
        (button :onclick "systemctl reboot" "")
        (button :onclick "bspc quit" "")
        (button :onclick "sh ~/.local/bin/lockscreen.sh" "")
        (button :onclick "systemctl hybrid-sleep" "")
    )
)
(defwidget launcher []
    (box :class "launcher" :orientation "h"
        (button :class "search" :onclick "~/.local/bin/appmnu" "  Click to search")
    )
)
(defwidget weather []
    (box :class "weather" :orientation "v" :space-evenly "false"
        (box :orientation "h" :space-evenly "false"
            (label :class "weather-desc" :text "${weather_desc}")
        )
        (label :class "weather-temp" :text "${weather_temp}°C")
        (label :class "weather-feels" :text "Feels like ${weather_feels}°C")
    )
)
(defwidget date []
    (box :class "date" :orientation "v" :space-evenly "false"
        (box :orientation "h" :space-evenly "false"
            (label :class "weekday" :text "${weekday}")
        )
        (label :class "monthday" :text "${monthday}")
    )
)
(defwidget player []
   (box :class "player" :orientation "h"
        (box :class "musicart" :halign "center" :valign "center" :style "background-image: url('${cover}')" "${art}"
        )
        (box :orientation "v" :class "music-info" :halign "center" :valign "center" :space-evenly "false"
            (box :class "musictitle" "${music3}")
            (box :class "musicalbum" "${music2}")
            (box :class "musicartist" "${music}")
            (box :class "musicbtn" :orientation "h" :space-evenly "false"
                (button :onclick "playerctl -p spotify previous" "") 
                (button :onclick "playerctl -p spotify play-pause" "${muscistat}") 
                (button :onclick "playerctl -p spotify next" "")
                (scale :min "0" :max "${duration}" :active "false" :value "${position}" :class "progress-bar") 
                (button :onclick "cd ~/.config/eww/scripts/spotify/ && ./spotify_to_like_or_not.sh -c &" "${like_status}")
            )
            (scale :min "0" :max "${duration}" :active "false" :value="${position}" :class "progress-bar")
        )
    ) 
)
(defwidget calender []
    (box :orientation "v" :space-evenly "false"
        (box :class "time" "${time}")
        (box :class "date" "${date}")
    )
)
(defwidget system_info []
    (box :orientation "v" :space-evenly "true" :class "sliders-side"
        (box :orientation "h" :class "slider-cpu-side" :space-evenly "false"
        (box :class "label-cpu-side" ""
        (scale :min "0" :active "false" :max "100" :value "${cpu-used}")
        (box :orientation "h" :class "slider-ram-side" :space-evenly "false"
          (box :class "label-ram-side" "")
          (scale :min "0" :active "false" :max "100" :value "${EWW_RAM}")
        )
        (box :orientation "h" :class "slider-hdd-side" :space-evenly "false"
          <box :class "label-hdd-side" "")
          (scale :min "0" :max "100" :active "false" :value "${hdd-used}")
        )
        )   
        )    
    )
)
(defwidget profile []
  (box :orientation "v" :space-evenly "false" :class "profile"
    (box :orientation "h" :space-evenly "true"
      (image :path "/home/barbarossa/Pictures/barbarossaCircle.png" :width "200" :height "200" :class "pfp")
    )
    (box :orientation "v" :space-evenly "false"
      (box :class "pfptxt" :valign "center" "${user}")
      (box :class "subpfptxt" :halign "center" "@${host}")
    )
    )
)
(defwidget launch []
  (box :orientation "v" :space-evenly "false" :class "launch"
    (box :orientation "h" :halign "center" :class "launch1" :space-evenly "false">
      (button :class "internet" :onclick "wmctrl -xa chromium || setsid -f chromium" "")
      (button :class "mail" :onclick "wmctrl -xa geary || setsid -f geary" "")
      (button :class "music" :onclick "wmctrl -xa spotify || setsid -f spotify" "")
      (button :class "file" :onclick "setsid -f nautilus" "")
      (button :class "editor" :onclick "wmctrl -xa code || setsid -f code" "")
    )
    (box :orientation "h" :halign "center" :class "launch2" space-evenly="false"
      (button :class "pomo" :onclick "wmctrl -xa io.elementary.calendar|| setsid -f io.elementary.calendar" "")
      (button :class "notes" :onclick "wmctrl -xa ptask || setsid -f ptask" "")
      (button :class "rstudio" :onclick "wmctrl -xa rstudio || setsid -f rstudio-bin" "")
      (button :class "slack" :onclick "wmctrl -xa slack || setsid -f slack" "")      
      (button :class "terminal" :onclick "setsid -f alacritty" "")
    )
    )
)
(defwidget weather []
  (box :orientation "h"  :space-evenly "false" :class "weather"
    (box :class "weather-icon-side" :style "color: ${weather-hex}" ${weather-icon})
    (box :class "weather-info-side" :rientation "v" :space-evenly "false"
        (box :class "temp-info" :orientation "h" :halign "center" :space-evenly "false"
        (box :class "temperature-side" "${temperature}")
        (box :class "thermometer" "")
        )
      (box :class "weather-stat-side" "${weather-stat-side}")
      (box :class "weather-quote1" "${weather-quote}")
    )
    )
)
(defwidget vol []
    (box :orientation "v" :space-evenly "true" :class "vol"
        (box :class "vol-icon" "${vol-icon}")
        (scale :min "0" :max "100" :active "false" :value "${current-vol}")
    )
)
(defwidget bright []
  (box :orientation "v" :space-evenly "true" :class "bright"
    (box :class "bright-icon" "")
    (scale :min "0" :max "100" :active "false" :value "${current-bright}")
    )
)
(defwidget quote []
    (box :class "quote" :orientation "v"
        (label :class "text" :text '"${quote}"')
        (label :class "author" :text "━ ${quote_author}")
    )
)
(defwindow calendar
           :monitor 0
           :geometry (geometry :x "-3%"
                               :y "-4%"
                               :width "9%"
                               :height "18%"
                               :anchor "bottom right")
           :stacking "fg"
           :windowtype "dialog"
           :wm-ignore true

  (calendar :halign "center" 
            :valign "center"
            :onhover `cal -m`))
